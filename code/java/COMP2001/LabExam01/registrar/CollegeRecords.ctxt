#BlueJ class context
comment0.target=CollegeRecords
comment0.text=\n\ Write\ a\ description\ of\ class\ CollegeRegistrar\ here.\n\n\ @author\ Dewan\ Mukto\n\ @version\ 2022\ Oct\ 26\n
comment1.params=
comment1.target=CollegeRecords()
comment1.text=\n\ Constructor\ for_\ objects\ of\ class\ CollegeRegistrar\n
comment10.params=c\ cap
comment10.target=void\ setMaxCapacity(java.lang.String,\ int)
comment10.text=\n\ Set\ the\ maximum\ capacity\ for\ a\ course.\ Do\ not\ distinguish\n\ course\ sections,\ the\ capacity\ is\ for\ all\ course\ sections.\n\n\ @param\ student\n\ @return\ a\ CollegeRecords\ of\ the\ student's\ course\ registrations\n
comment11.params=r
comment11.target=boolean\ safeAdd(Registration)
comment11.text=\ add\ the\ registration\ to\ the\ reocrords\ unless\n\ the\ capacity\ of\ the\ course\ has\n\ been\ set\ and\ the\ course\ is\ full\ acording\ to\ the\ records.\n\ \n\ Return\ true\ if\ the\ course\ is\ added,\ false\ if\ it\ is\ not.\n
comment12.params=
comment12.target=CollegeRecords\ conflicts()
comment12.text=\n\ Find\ all\ the\ records\ where\ there\ is\ a\ student\ scheduling\ conflict,\ in\ other\ words,\n\ a\ student\ is\ registered\ for\ more\ than\ one\ class\ in\ the\ same\ time\ slot.\n\n\ Return\ a\ CollegeRecords\ object\ containing\ all\ records\ that\ have\ a\ conflict.\n
comment13.params=prof
comment13.target=java.util.HashMap\ teaching(java.lang.String)
comment13.text=\n\ Use\ a\ filter-map-forEach\ chain\ to\ determine\ how\ many\ students\ a\ prof\ has\ registered\ in\ each\ class.\n\ No\ loops\ are\ allowed.\n\ @param\ prof\ the\ professor\ whose\ courses\ to\ consider\n\ @return\ a\ HashMap\ of\ courseID-enrollment\ mappings.\n
comment2.params=r
comment2.target=boolean\ verifyCourseID(Registration)
comment2.text=\n\ Check\ that\ the\ CourseID\ is\ one\ of\ the\ valid\ courses\ formatted\n\ with\ 4\ letters\ and\ 4\ numerals.\n\ @param\ r\ a\ Registration\ object\n\ @return\ true/false\ depending\ if\ the\ course\ is\ formatted\ correctly\n
comment3.params=c
comment3.target=boolean\ verifyCourseID(java.lang.String)
comment3.text=\n\ Check\ that\ the\ CourseID\ is\ one\ of\ the\ valid\ courses\ formatted\n\ with\ 4\ letters\ and\ 4\ numerals.\n\ @param\ c\ a\ CourseID\n\ @return\ true/false\ depending\ if\ the\ course\ is\ formatted\ correctly\n
comment4.params=r
comment4.target=boolean\ verifySection(Registration)
comment4.text=\n\ Check\ that\ the\ registration\ timeslot\ is\ valid\n\ @param\ r\ a\ Registration\ object\n\ @return\ true/false\ depending\ if\ the\ section\ is\ valid\n
comment5.params=r
comment5.target=boolean\ verifySlot(Registration)
comment5.text=\n\ Check\ that\ the\ registration\ section\ is\ valid\n\ @param\ a\ Registration\ object\n\ @return\ true/false\ depending\ if\ the\ timeslot\ is\ valid\n
comment6.params=newRegistration
comment6.target=CollegeRecords\ add(Registration)
comment6.text=\n\ add\ the\ registration\ to\ the\ college\ records\n\n\ @param\ \ a\ new\ Registration\ object\n\ @return\ chaining\ object\n
comment7.params=
comment7.target=int\ count()
comment7.text=\n\n\ @return\ a\ count\ of\ the\ registration\ records\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\n\ convert\ the\ college\ records\ to\ a\ string\n\ of\ semi-colon\ separated\ registration\ records\n\ Each\ record\ is\ surrounded\ by\ brackets\ []\ such\ as\:\n\n\ [record\ here];[record\ here];[record\ here]\n\ \n\ There\ should\ be\ no\ trailing\ semi-colon\ in\ the\ string.\n\n\ @return\ \ \ \ CollegeRecords\ as\ a\ string\ representation\n
comment9.params=
comment9.target=CollegeRecords\ clean()
comment9.text=\n\ Use\ all\ three\ validity\ predicates\ to\ remove\ invalid\ records\ from\ this\n\ CollegeRecords\ object\ and\ return\ records\ that\n\ were\ removed\ as\ a\ different\ CollegeRecords\ object.\n\n\ @return\ a\ CollegeRecords\ of\ invalid\ registrations\ that\ were\ removed\n
numComments=14
