#BlueJ class context
comment0.target=CollegeRecordsInterface
comment1.params=courseId
comment1.target=boolean\ addValidCourseID(java.lang.String)
comment1.text=\n\ Add\ a\ valid\ courseID\ for_\ validity\ checking.\ Only\ courseIDs\ added\ are\ considered\ valid.\n\ Do\ not\ permit\ a\ duplicate\ courseID\ to\ be\ added\n\n\ @param\ courseId\ the\ course\ ID\ to\ add\n\ @return\ false\ if\ this\ course\ is\ already\ listed,\ otherwise\ false\n
comment10.params=courseID\ section
comment10.target=CollegeRecords\ sectionRecords(java.lang.String,\ int)
comment10.text=\n\ the\ registrations\ for.\ a\ particular\ course\ section\n\n\ @param\ courseID\n\ @param\ section\n\ @return\ a\ CollegeRecords\ object\ containing\ registrations\ for.\ the\ course\ section\n
comment11.params=student
comment11.target=CollegeRecords\ dropAllClassesForStudent(java.lang.String)
comment11.text=\n\ delete\ registrations\ for.\ this\ student\ and\ return\ an\ object\n\ containining\ the\ removed\ registrations\n\n\ @param\ student\n\ @return\ a\ CollegeRecord\ object\ of\ the\ courses\ dropped\n
comment12.params=professor
comment12.target=java.lang.String\ profCourses(java.lang.String)
comment12.text=\n\ return\ a\ String\ containing\ the\ IDs\ of\ all\ courses\ for\ this\ professor.\ The\ string\n\ should\ not\ contian\ duplicates\ of\ the\ course\ IDs\n
comment2.params=newRegistration
comment2.target=CollegeRecords\ add(Registration)
comment2.text=\n\ add\ the\ registration\ to\ the\ college\ records\n\n\ @param\ a\ new\ Registration\ object\n\ @return\ chaining\ object\n
comment3.params=
comment3.target=int\ count()
comment3.text=\n\ @return\ a\ count\ of\ the\ registration\ records\n
comment4.params=
comment4.target=java.lang.String\ toString()
comment4.text=\n\ convert\ the\ college\ records\ to\ a\ string\n\ of\ comma\ separated\ registration\ records\n
comment5.params=
comment5.target=CollegeRecords\ clean()
comment5.text=\n\ Use\ all\ three\ private\ validity\ predicates\ to\ remove\ invalid\ records\ from\ this\n\ CollegeRecords\ object\ and\ return\ records\ that\n\ were\ removed\ as\ a\ different\ CollegeRecords\ object.\n\n\ @return\ a\ CollegeRecords\ of\ invalid\ registrations\ that\ were\ removed\n
comment6.params=
comment6.target=CollegeRecords\ removeDuplicates()
comment6.text=\n\ Remove\ duplicate\ records.\n\n\ @return\ a\ CollegeRecords\ of\ duplicate\ registrations\ that\ were\ removed\ from\ this\ \n\ \ \ \ \ \ \ \ \ CollegeRecords\ object.\n
comment7.params=student
comment7.target=CollegeRecords\ recordsForStudent(java.lang.String)
comment7.text=\n\ returns\ CollegeRecords\ for.\ a\ student\n\ do\ not\ alter\ the\ existing\ CollegeRecords\ object\n\n\ @param\ student\n\ @return\ a\ CollegeRecords\ of\ the\ student's\ course\ registrations\n
comment8.params=student
comment8.target=int\ courseCount(java.lang.String)
comment8.text=\n\ the\ number\ of\ courses\ this\ student\ is\ registered\ for\n\n\ @param\ student\n\ @return\ the\ number\ of\ courses\ this\ student\ is\ registered\ for\n
comment9.params=professor
comment9.target=CollegeRecords\ recordsForProfessor(java.lang.String)
comment9.text=\n\ the\ Registrations\ listing\ this\ professor\n\n\ @param\ professor\n\ @return\ a\ CollegeRecords\ object\ of\ all\ registrations\ with\ the\ given\ professor\n
numComments=13
