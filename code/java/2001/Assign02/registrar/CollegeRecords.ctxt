#BlueJ class context
comment0.target=CollegeRecords
comment0.text=\n\ Write\ a\ description\ of\ class\ CollegeRegistrar\ here.\n\n\ @author\ Ed\ Brown,\ Dewan\ Mukto\n\ @version\ 2022\ Oct\ 14\n
comment1.params=
comment1.target=CollegeRecords()
comment1.text=\n\ Constructor\ for_\ objects\ of\ class\ CollegeRegistrar\n
comment10.params=professor
comment10.target=CollegeRecords\ recordsForProfessor(java.lang.String)
comment10.text=\n\ the\ Registrations\ listing\ this\ professor\n\ @param\ professor\n\ @return\ a\ CollegeRecords\ object\ of\ all\ registrations\ with\ the\ given\ professor\n
comment11.params=courseID\ section
comment11.target=CollegeRecords\ sectionRecords(java.lang.String,\ int)
comment12.params=student
comment12.target=CollegeRecords\ dropAllClassesForStudent(java.lang.String)
comment13.params=professor
comment13.target=java.lang.String\ profCourses(java.lang.String)
comment14.params=r
comment14.target=boolean\ verifyCourseID(Registration)
comment14.text=\n\ Method\ verifyCourseID\n\n\ @param\ r\ the\ registration\ record\ to\ verify\n\ @return\ returns\ true\ if\ and\ only\ if\ the\ registration\ object\ refers\ to\ a\ course\ previously\ added\ as\ valid\n
comment15.params=r
comment15.target=boolean\ verifySection(Registration)
comment15.text=\n\ Method\ verifySection\n\n\ @param\ \ r\ \ the\ registration\ record\ to\ verify\n\ @return\ \ \ \ returns\ true\ if\ and\ only\ if\ the\ registration\ object's\ section\ is\ between\ 0\ and\ 2\ inclusive\n
comment16.params=r
comment16.target=boolean\ verifySlot(Registration)
comment16.text=\n\ Method\ verifySlot\n\n\ @param\ r\ the\ registration\ record\ to\ verify\n\ @return\ returns\ true\ if\ and\ only\ if\ the\ registration\ object's\ time\ slot\ is\ between\ 12\ and\ 25\ inclusive\n
comment2.params=courseId
comment2.target=boolean\ addValidCourseID(java.lang.String)
comment2.text=\n\ Add\ a\ valid\ courseID\ for_\ validity\ checking.\ Only\ courseIDs\ added\ are\ considered\ valid.\n\ Do\ not\ permit\ a\ duplicate\ courseID\ to\ be\ added\n\ @param\ courseId\ the\ course\ ID\ to\ add\n\ @return\ false\ if\ this\ course\ is\ already\ listed,\ otherwise\ true\n
comment3.params=newRegistration
comment3.target=CollegeRecords\ add(Registration)
comment3.text=\n\ add\ the\ registration\ to\ the\ college\ records\n\n\ @param\ \ a\ new\ Registration\ object\n\ @return\ \ \ \ chaining\ object\n
comment4.params=
comment4.target=int\ count()
comment4.text=\n\n\ @return\ a\ count\ of\ the\ registration\ records\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment6.params=
comment6.target=CollegeRecords\ clean()
comment6.text=\n\ Use\ all\ three\ validity\ predicates\ to\ remove\ invalid\ records\ from\ this\n\ CollegeRecords\ object\ and\ return\ records\ that\n\ were\ removed\ as\ a\ different\ CollegeRecords\ object.\n\n\ @return\ a\ CollegeRecords\ of\ invalid\ registrations\ that\ were\ removed\n
comment7.params=
comment7.target=CollegeRecords\ removeDuplicates()
comment8.params=student
comment8.target=CollegeRecords\ recordsForStudent(java.lang.String)
comment9.params=student
comment9.target=int\ courseCount(java.lang.String)
numComments=17
