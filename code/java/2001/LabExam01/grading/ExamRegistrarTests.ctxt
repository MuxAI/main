#BlueJ class context
comment0.target=ExamRegistrarTests
comment1.params=adders
comment1.target=void\ insertTestRecords(java.lang.String[])
comment10.params=
comment10.target=void\ testToString()
comment10.text=\ CollegeRecords\ toString\ should\ list\ each\ records'\ strings\ surrounded\ by\ brackets\ []\ and\n\ \ \ \ \ \ \ separated\ by\ semi-colon\ ";".\ The\ trailing\ (last)\ string\ should\ not\ have\ a\ semicolon.\n\ \ \ \ \ \ \ Four\ example,\n
comment11.params=
comment11.target=void\ testToStringReduce()
comment12.params=
comment12.target=void\ profLast()
comment13.params=
comment13.target=void\ profLast_OneNames()
comment14.params=
comment14.target=void\ profLast_NoNames()
comment15.params=sourceFile\ methName
comment15.target=void\ assertNoLoops(java.lang.String,\ java.lang.String)
comment16.params=sourceFile\ methName\ contentString
comment16.target=boolean\ codeMethHas(java.lang.String,\ java.lang.String,\ java.lang.String)
comment17.params=codeLine
comment17.target=java.lang.String\ lineXLoops(java.lang.String)
comment18.params=src\ start\ end
comment18.target=void\ removeComments(java.lang.String[],\ int,\ int)
comment19.params=srcLines\ methodName
comment19.target=int[]\ findMethod(java.lang.String[],\ java.lang.String)
comment2.params=dat
comment2.target=registrar.Registration\ splitRegistration(java.lang.String)
comment20.params=
comment20.target=void\ conflicts()
comment20.text=\n\ modify\ the\ conflicts\ method\ so\ it\ returns\ the\ correct\ values\n
comment21.params=
comment21.target=void\ conflicts_NoLoops()
comment21.text=\n\ modify\ the\ conflicts\ method\ to\ use\ functional\ style\ without\ any\ explicit\ loops.\n\ @throws\ IOException\n
comment22.params=
comment22.target=void\ teaching()
comment22.text=\n\ wrtie\ a\ teaching\ method\ for\ a\ specific\ prof\ will\ return\ a\ hash\ map\ where\ the\ key\ strings\ are\ courseIDs\ that\ prof\ is\ teaching\ \ and\ the\ count\ in\ the\ number\ of\ regoistrations\ for\ the\ course.\ \ You\ can\ ignore\ section\ numbers\ ofr\ this\ method.\n
comment23.params=
comment23.target=void\ teaching_NoLoops()
comment24.params=
comment24.target=void\ verifyCourseID()
comment24.text=\n\ Change\ verifyCourseID\ modifiers\ so\ it\ can\ be\ called\ from\ outside\ the\ class.\n\ and\ so\ that\ it\ can\ be\ called\ without\ using\ an\ instance\ of\ CollegeRecords.\n\n\ Change\ the\ clean\ method\ so\ it\ call\ the\ new\ version\ of\ verifyCourseId\ correctly\n
comment25.params=
comment25.target=void\ verifyCourseID_clean()
comment3.params=
comment3.target=int\ countSection()
comment4.params=
comment4.target=void\ setUp()
comment5.params=
comment5.target=void\ tearDown()
comment6.params=
comment6.target=void\ testHasCapacityField()
comment6.text=\ use\ a\ hashmap\ to\ maintain\ a\ cap\ (capacity)\ limit\ for\ the\ maximum\ enrollments\ (number\ of\ registrrations)\n\ \ \ \ in\ a\ course.\n\ \ \ All\ sections\ count\ in\ the\ enrollment\ for\ a\ course.\n
comment7.params=
comment7.target=void\ setMaxCapacity()
comment8.params=
comment8.target=void\ safeAdd()
comment8.text=\nadd\ the\ registration\ only\ id\ the\ course\ has\ not\ exceeded\ capacity,\ if\ capacioty\ has\ been\ set\n
comment9.params=
comment9.target=void\ safeAddEmpty()
numComments=26
